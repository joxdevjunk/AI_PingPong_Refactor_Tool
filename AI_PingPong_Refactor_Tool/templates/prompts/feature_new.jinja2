# ‚ú® Nouvelle Feature - {{ project_name }}

{% include 'sections/context.jinja2' %}

## üìã Demande de Feature

{{ feature_description if feature_description else "‚ö†Ô∏è Description de la feature √† fournir" }}

## üèóÔ∏è Architecture Existante

{% if num_tasks == 0 %}
‚ö†Ô∏è **Aucune task s√©lectionn√©e** - S√©lectionnez les composants pertinents qui seront impact√©s ou serviront de base.
{% else %}

### Composants S√©lectionn√©s

{% for task in selected_tasks %}
{% include 'sections/code_snippet.jinja2' %}
{% endfor %}
{% endif %}

## üéØ Ta Mission

{% if code_mode %}
{# MODE CODE : G√©n√©ration code complet #}
Impl√©mente cette feature avec du **code complet pr√™t √† utiliser**.

**R√àGLES STRICTES** :
- Code **COMPLET et FONCTIONNEL** (pas de `...`)
- Tous les imports
- Docstrings compl√®tes
- Gestion erreurs
- Code pr√™t √† copier-coller

**Format de r√©ponse** :

{
"feature_analysis": "Analyse de la demande",
"implementation": {
"new_files": [
{
"filename": "new_module.py",
"purpose": "Description",
"full_code": "# CODE PYTHON COMPLET\nimport required_modules\n\nclass NewFeature:\n '''Docstring compl√®te'''\n \n def init(self):\n pass\n \n def main_method(self):\n '''Fait X'''\n # Impl√©mentation compl√®te\n return result"
}
],
"modified_files": [
{
"filename": "existing_file.py",
"changes_description": "Ajout m√©thode X",
"full_modified_code": "# CODE COMPLET DU FICHIER MODIFI√â"
}
]
},
"usage_example": "from new_module import NewFeature\n\nfeature = NewFeature()\nfeature.main_method()",
"tests": {
"test_code": "import unittest\n# Tests complets"
},
"ready_to_implement": true
}

{% else %}
{# MODE ANALYSE : Architecture et plan #}
Propose l'architecture et l'impl√©mentation de cette nouvelle feature.

**Format de r√©ponse attendu** :
{
"feature_analysis": "Analyse de la demande et compr√©hension",
"architecture_proposal": {
"approach": "Approche recommand√©e",
"components": [
{
"name": "Nom du composant",
"type": "class/module/function",
"responsibility": "Responsabilit√©"
}
],
"integration_points": [
"Points d'int√©gration avec code existant"
]
},
"files_to_create": [
{
"file": "nouveau_fichier.py",
"description": "Description et contenu",
"code_outline": "Structure du code"
}
],
"files_to_modify": [
{
"file": "fichier_existant.py",
"changes": "Modifications n√©cessaires"
}
],
"implementation_plan": [
"√âtape 1 : ...",
"√âtape 2 : ..."
],
"tests_strategy": "Strat√©gie de tests",
"questions": [],
"next_needed": [],
"ready_to_implement": false
}
{% endif %}

**R√©ponds UNIQUEMENT avec le JSON.**

